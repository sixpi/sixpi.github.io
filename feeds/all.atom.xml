<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bing's Blog</title><link href="//bxia.net/" rel="alternate"></link><link href="//bxia.net/feeds/all.atom.xml" rel="self"></link><id>//bxia.net/</id><updated>2014-04-29T00:00:00-04:00</updated><entry><title>Jenkins CI on Openshift</title><link href="//bxia.net/blog/2014/04/29/jenkins-ci-on-openshift/" rel="alternate"></link><published>2014-04-29T00:00:00-04:00</published><updated>2014-04-29T00:00:00-04:00</updated><author><name>Bing Xia</name></author><id>tag:bxia.net,2014-04-29:/blog/2014/04/29/jenkins-ci-on-openshift/</id><summary type="html">&lt;p&gt;How to set up a free Jenkins build server on Openshift.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post, I'll describe how I set up a
&lt;a href="https://jenkins-ci.org/"&gt;Jenkins CI&lt;/a&gt; server on
&lt;a href="https://www.openshift.com/"&gt;Openshift&lt;/a&gt;. This will give you a
continuous integration server which you have (almost) full control
over, for free :).&lt;/p&gt;
&lt;p&gt;Openshift is a cloud computing offering by Red Hat, and they helpfully
provides a pre-configured Jenkins application, which we will be
using. After starting the new application process, you can choose from
a number of "Instant Applications", which come ready to go. Just
choose Jenkins Server from the list of instant apps, give your
application a name (I called my "jenkins"), and wait for a little
bit...and your application is created (make sure to note the username
and password). Just point your browser to the provided URL and you
should see your Jenkins app running happily :).&lt;/p&gt;
&lt;p&gt;After logging into Jenkins, there are a few things that you'll want to
configure right away. By default, there are no executors to run your
builds, so you'll probably want to set this to 1 (if you're on a free
account and only have access to small gears). You may also want to
configure add a new user with an API key if you want to trigger builds
from other services (such as Bitbucket or Github). Also, many of the
plugins (and Jenkins itself) are older versions, so update them if you
want (if you don't see any updates, go to the advanced tab and click
the "Check Now" button in the lower right).&lt;/p&gt;
&lt;h4&gt;Bitbucket integration&lt;/h4&gt;
&lt;p&gt;The next thing I wanted to do was enable my Jenkins instance to
automatically build a project from Bitbucket whenever anyone pushed to
it. While creating a new job in Jenkins, check the "Trigger builds
remotely" checkbox. You'll need to create a authentication token (use
a random password generator). Then, from Bitbucket, add a hook to the
project you want to be automatically built. There is a Jenkins hook
you can use - enter the base Jenkins URL, the job name from Jenkins,
and the authentication token. This would normally be all you need to
do to get everything working.&lt;/p&gt;
&lt;p&gt;However, there is a little more to be done since the Openshift doens't
give you write access to the home directory. Because of this, SSH
can't save the host key for the Bitbucket servers into
&lt;code&gt;.ssh/known_hosts&lt;/code&gt;. You can get around this by making a wrapper for
ssh that &lt;code&gt;git&lt;/code&gt; uses, as described
&lt;a href="https://www.openshift.com/forums/openshift/private-git-repo-clone-on-deploy"&gt;here&lt;/a&gt;. I
added the extra option &lt;code&gt;-o
UserKnownHostsFile=$HOME/.openshift_ssh/known_hosts&lt;/code&gt; to also work
around not being able to write to the usual known hosts file. You can
make git always use your ssh wrapper with the command &lt;code&gt;rhc env set
GIT_SSH=&amp;lt;PATH_TO_SSH_WRAPPER&amp;gt; --app &amp;lt;YOUR_APP_NAME&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After these steps, your Jenkins instance should be able to pull from
any git repository you have access to on Bitbucket, even if its a
private repository!&lt;/p&gt;</content><category term="automatic"></category><category term="CI"></category></entry><entry><title>Daemonizing with Upstart</title><link href="//bxia.net/blog/2013/08/01/upstart-daemonizing/" rel="alternate"></link><published>2013-08-01T00:00:00-04:00</published><updated>2013-08-01T00:00:00-04:00</updated><author><name>Bing Xia</name></author><id>tag:bxia.net,2013-08-01:/blog/2013/08/01/upstart-daemonizing/</id><summary type="html">&lt;p&gt;Figured out how to daemonize ipython notebook and emacs daemon using upstart.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I've been trying to use IPython notebooks more while doing
research. Since the notebook server needs to be started before you can
use the awesomeness of IPython notebooks, I decided to try to find a
method to automatically start my notebook server when I login.&lt;/p&gt;
&lt;p&gt;Since I do most of my development on Ubuntu, one obvious choice was
&lt;a href="http://upstart.ubuntu.com/"&gt;Upstart&lt;/a&gt;. The 'Getting Started' page
pointed me to the &lt;a href="http://upstart.ubuntu.com/cookbook/"&gt;cookbook&lt;/a&gt;,
which I read through. I found the cookbook to be less of a cookbook,
and more of a comprehensive reference for all the commands, which made
it a little hard to get started. One thing that wasn't explained in
the cookbook was how to enable session init management. However, I
found a helpful page
&lt;a href="http://ifdeflinux.blogspot.com/2013/04/upstart-user-sessions-in-ubuntu-raring.html"&gt;here&lt;/a&gt;
which explained how to enable Upstart user sessions.&lt;/p&gt;
&lt;p&gt;After some experimentation, I was able to get the following conf file
working:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Job configuration for IPython Notebook&lt;/span&gt;
description &lt;span class="s2"&gt;&amp;quot;IPython Notebook&amp;quot;&lt;/span&gt;

stop on runlevel&lt;span class="o"&gt;[&lt;/span&gt;06&lt;span class="o"&gt;]&lt;/span&gt;

respawn
respawn limit &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;# respawn up to 10 times, waiting 5 seconds each time&lt;/span&gt;

pre-start script
    &lt;span class="o"&gt;[&lt;/span&gt; ! -f &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.virtualenvs/molpy3/bin/activate &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; stop&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; 0&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

    . &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.virtualenvs/molpy3/bin/activate
end script

&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.virtualenvs/molpy3/bin/ipython3 notebook --profile&lt;span class="o"&gt;=&lt;/span&gt;nbserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This file should be placed in &lt;code&gt;$HOME/.config/upstart&lt;/code&gt; with a &lt;code&gt;.conf&lt;/code&gt;
extension.&lt;/p&gt;
&lt;p&gt;While I was playing with Upstart, I also decided to daemonize my
emacs. I already use &lt;code&gt;emacs --daemon&lt;/code&gt; on my machine almost
exclusively, but it would be nice for the emacs server to start
automatically and be killed in a nice manner (saving unsaved files) on
shutdown. The script for daemonizing emacs looks very similar, except
that I have a &lt;code&gt;pre-stop&lt;/code&gt; block which uses emacsclient to call
&lt;code&gt;(save-some-buffers t)&lt;/code&gt; before emacs is killed.&lt;/p&gt;</content><category term="upstart"></category><category term="daemon"></category><category term="automation"></category></entry><entry><title>First post with Pelican</title><link href="//bxia.net/blog/2013/07/22/first-post/" rel="alternate"></link><published>2013-07-22T00:00:00-04:00</published><updated>2013-07-22T00:00:00-04:00</updated><author><name>Bing Xia</name></author><id>tag:bxia.net,2013-07-22:/blog/2013/07/22/first-post/</id><summary type="html">&lt;p&gt;This is me trying out blogging with Pelican for the first time.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is me trying out blogging with Pelican for the first time.&lt;/p&gt;</content><category term="pelican"></category><category term="python"></category></entry></feed>